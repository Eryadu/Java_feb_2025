package april29Streams;

import java.util.Locale;
import java.util.stream.Stream;

public class InfiniteStreamMethod {
    public static void main(String[] args) {
       /* The first argument is a seed that is the first
        element of the stream. The second element is generated by applying the function to the first element. The third
        element is generated by applying the function on the second element and so on. Its elements are seed, f(seed),
                f(f(seed)), f(f(f(seed))), and so on.*/

        Stream<Long> numbers = Stream.iterate(1L, n -> n + 1).limit(5);
        numbers.forEach(System.out::println);
        System.out.println();

        Stream<Integer> oddNumbers = Stream.iterate(1, n -> n + 2).limit(3);
        oddNumbers.forEach(System.out::println);

        // Generate() method
        // The generate(Supplier<T> s) method uses the specified Supplier to generate an infinite sequential unordered
        //stream.

        Stream<Double> number2 = Stream.generate(() ->
                                        {double d = (Math.random()* 1000);
                                            return d;})
                                        .limit(2);


        // Second way by method reference
        Stream<Double> number3 = Stream.generate(Math::random).limit(2);

        number2.forEach(System.out::println);
        System.out.println();
        number3.forEach(System.out::println);


    }
}
